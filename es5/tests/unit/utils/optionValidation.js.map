{"version":3,"file":"optionValidation.js","sourceRoot":"","sources":["../../../../tests/unit/utils/optionValidation.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable only-arrow-functions\n\nimport * as assert from 'assert';\nimport { DiagnosticError } from '../../../lib/errors';\nimport {\n  createAudioDeviceValidator,\n  validateOptions,\n  validateTime,\n} from '../../../lib/utils/optionValidation';\nimport { mockEnumerateDevicesFactory } from '../../mocks/mockEnumerateDevices';\n\ndescribe('OptionValidation', function() {\n  describe('validateTime', function() {\n    it('should return an invalidity string if the time is negative', function() {\n      const shouldBeString = validateTime(-1);\n      assert.equal(typeof shouldBeString, 'string');\n    });\n    it('should return `undefined` if the time is valid', function() {\n      const shouldBeUndefined = validateTime(0);\n      assert.equal(typeof shouldBeUndefined, 'undefined');\n\n      const shouldAlsoBeUndefined = validateTime(1);\n      assert.equal(typeof shouldAlsoBeUndefined, 'undefined');\n    });\n  });\n\n  describe('AudioDeviceValidator', function() {\n    describe('createAudioDeviceValidator', function() {\n      describe('when not given any options', function() {\n        let validator: Function;\n        before(function() {\n          validator = createAudioDeviceValidator();\n        });\n        it('should return a function', function() {\n          assert.equal(typeof validator, 'function');\n        });\n        it('should throw an `DiagnosticError`', async function() {\n          try {\n            await validator('foobar');\n          } catch (error) {\n            assert(error instanceof DiagnosticError);\n          }\n        });\n      });\n      describe('when given some options', function() {\n        const mockOptions = [{\n          deviceId: undefined,\n          devices: [],\n          expected: 'No audio devices available.',\n          title: 'when it returns no devices',\n        }, {\n          deviceId: undefined,\n          devices: [{ deviceId: 'default' }],\n          expected: undefined,\n          title: 'when it has a default device',\n        }, {\n          deviceId: undefined,\n          devices: [{ deviceId: 'default', kind: 'audioinput' }],\n          expected: undefined,\n          kind: 'audioinput',\n          title: 'when looking for a specific kind that is available',\n        }, {\n          deviceId: undefined,\n          devices: [{ deviceId: 'default', kind: 'audiooutput' }],\n          expected: `No devices found with the correct kind \"audioinput\".`,\n          kind: 'audioinput',\n          title: 'when looking for a specific kind that is not available',\n        }, {\n          deviceId: 'foobar',\n          devices: [{ deviceId: 'default' }],\n          expected: `Device ID \"foobar\" not found within list of available devices.`,\n          title: 'when looking for a id that is not available',\n        }, {\n          deviceId: 'foobar',\n          devices: [\n            { deviceId: 'foobar', kind: 'audiooutput' },\n            { deviceId: 'barfoo', kind: 'audioinput' },\n          ],\n          expected: `Device ID \"foobar\" is not the correct \"kind\",`\n            + ` expected \"audioinput\".`,\n          kind: 'audioinput',\n          title: 'when looking for a id that is available but not the correct kind',\n        }];\n\n        mockOptions.forEach(options => {\n          describe(options.title, function() {\n            let validator: Function;\n            before(function() {\n              validator = createAudioDeviceValidator({\n                enumerateDevices: mockEnumerateDevicesFactory({\n                  devices: options.devices as any,\n                }),\n                kind: options.kind as any,\n              });\n            });\n            it('should return a function', function() {\n              assert(typeof validator === 'function');\n            });\n            it('should return an invalidity string', async function() {\n              const reason = await validator(options.deviceId);\n              assert.equal(reason, options.expected);\n            });\n          });\n        });\n      });\n    });\n  });\n\n  describe('validateOptions', function() {\n    it('should not return anything for valid options', async function() {\n      const reasons = await validateOptions({\n        someOption: 10,\n      }, {\n        someOption: validateTime,\n      });\n      assert.equal(typeof reasons, 'undefined');\n    });\n\n    describe('should return invalid reasons for invalid options', function() {\n      it('should work for a real validator', async function() {\n        const reasons = await validateOptions({\n          someOption: -10,\n        }, {\n          someOption: validateTime,\n        });\n        assert.equal(typeof reasons, 'object');\n      });\n\n      it('should work for a mock async validator', async function() {\n        const reasons = await validateOptions({\n          someOption: -10,\n        }, {\n          someOption: async () => 'foobar',\n        });\n        assert.equal(typeof reasons, 'object');\n      });\n\n      it('should work for a mock validator', async function() {\n        const reasons = await validateOptions({\n          someOption: -10,\n        }, {\n          someOption: () => 'foobar',\n        });\n        assert.equal(typeof reasons, 'object');\n      });\n    });\n  });\n});\n"]}