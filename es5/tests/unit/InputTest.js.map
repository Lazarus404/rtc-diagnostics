{"version":3,"file":"InputTest.js","sourceRoot":"","sources":["../../../tests/unit/InputTest.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable only-arrow-functions\n\nimport * as assert from 'assert';\nimport { DiagnosticError } from '../../lib/errors';\nimport {\n  InputTest,\n  testInputDevice,\n} from '../../lib/InputTest';\nimport { mockAudioContextFactory } from '../mocks/MockAudioContext';\nimport { mockEnumerateDevicesFactory } from '../mocks/mockEnumerateDevices';\nimport { mockGetUserMediaFactory } from '../mocks/mockGetUserMedia';\nimport { MockMediaStream } from '../mocks/MockMediaStream';\nimport { MockTrack } from '../mocks/MockTrack';\n\nconst defaultDuration = 100;\nconst defaultPollIntervalMs = 10;\n\nconst getUserMedia = mockGetUserMediaFactory({\n  mediaStream: new MockMediaStream({\n    tracks: [new MockTrack()],\n  }),\n}) as any;\n\ndescribe('testInputDevice', function() {\n  describe('when the volume values are all 100', function() {\n    let report: InputTest.Report;\n    let test: InputTest;\n\n    before(async function() {\n      report = await new Promise(resolve => {\n        test = testInputDevice({\n          audioContextFactory: mockAudioContextFactory({\n            analyserNodeOptions: { volumeValues: 100 },\n          }) as any,\n          duration: defaultDuration,\n          enumerateDevices: mockEnumerateDevicesFactory({\n            devices: [{ deviceId: 'default', kind: 'audioinput' } as any],\n          }),\n          getUserMedia,\n          pollIntervalMs: defaultPollIntervalMs,\n        });\n        test.on(InputTest.Events.End, (_, r) => resolve(r));\n      });\n    });\n\n    it('should have passed', function() {\n      assert(report.didPass);\n    });\n\n    it('should return a max volume value of 100', function() {\n      assert.equal(test.maxVolume, 100);\n    });\n  });\n\n  describe('when the volume values are all 0', function() {\n    let report: InputTest.Report;\n\n    before(async function() {\n      report = await new Promise(resolve => {\n        testInputDevice({\n          audioContextFactory: mockAudioContextFactory({\n            analyserNodeOptions: { volumeValues: 0 },\n          }) as any,\n          duration: defaultDuration,\n          enumerateDevices: mockEnumerateDevicesFactory({\n            devices: [{ deviceId: 'default', kind: 'audioinput' } as any],\n          }),\n          getUserMedia,\n          pollIntervalMs: defaultPollIntervalMs,\n        }).on(InputTest.Events.End, (_, r) => resolve(r));\n      });\n    });\n\n    it('should have not passed', function() {\n      assert.equal(report.didPass, false);\n    });\n  });\n\n  describe('should immediately end and report an error', function() {\n    // not providing the mock object here results in the test resorting to the\n    // global\n    // because these are unit tests, and node does not have these globals,\n    // they are null and are essentially \"not supported\"\n\n    it('when AudioContext is not supported', async function() {\n      const report: InputTest.Report = await new Promise(resolve => {\n        const test = testInputDevice({\n          enumerateDevices: mockEnumerateDevicesFactory({\n            devices: [{ deviceId: 'default', kind: 'audioinput' } as any],\n          }),\n          getUserMedia,\n        });\n        test.on(InputTest.Events.Error, () => {\n          // do nothing, prevent rejection\n        });\n        test.on(InputTest.Events.End, (_, r) => resolve(r));\n      });\n      assert(report);\n      assert.equal(report.didPass, false);\n      assert.equal(report.errors.length, 1);\n      const [error] = report.errors;\n      assert(error instanceof DiagnosticError);\n      assert.equal(error.name, 'UnsupportedError');\n    });\n    it('when getUserMedia is not supported', async function() {\n      const report: InputTest.Report = await new Promise(resolve => {\n        const test = testInputDevice({\n          audioContextFactory: mockAudioContextFactory() as any,\n          enumerateDevices: mockEnumerateDevicesFactory({\n            devices: [{ deviceId: 'default', kind: 'audioinput' } as any],\n          }),\n        });\n        test.on(InputTest.Events.Error, () => {\n          // do nothing, prevent rejection\n        });\n        test.on(InputTest.Events.End, (_, r) => resolve(r));\n      });\n      assert(report);\n      assert.equal(report.didPass, false);\n      assert.equal(report.errors.length, 1);\n      const [error] = report.errors;\n      assert(error instanceof DiagnosticError);\n      assert.equal(error.name, 'UnsupportedError');\n    });\n    it('when neither AudioContext or getUserMedia is supported', async function() {\n      const report: InputTest.Report = await new Promise(resolve => {\n        const test = testInputDevice({\n          enumerateDevices: mockEnumerateDevicesFactory({\n            devices: [{ deviceId: 'default', kind: 'audioinput' } as any],\n          }),\n        });\n        test.on(InputTest.Events.Error, () => {\n          // do nothing, prevent rejection\n        });\n        test.on(InputTest.Events.End, (_, r) => resolve(r));\n      });\n      assert(report);\n      assert.equal(report.didPass, false);\n      assert.equal(report.errors.length, 1);\n      const [error] = report.errors;\n      assert(error instanceof DiagnosticError);\n      assert.equal(error.name, 'UnsupportedError');\n    });\n  });\n\n  it('should do nothing if stopped multiple times', function() {\n    const test = testInputDevice({\n      audioContextFactory: mockAudioContextFactory({\n        analyserNodeOptions: { volumeValues: 100 },\n      }) as any,\n      debug: false, // prevent console warnings\n      enumerateDevices: mockEnumerateDevicesFactory({\n        devices: [{ deviceId: 'default', kind: 'audioinput' } as any],\n      }),\n      getUserMedia,\n    });\n    const report = test.stop();\n    assert(report);\n    const shouldBeUndefined = test.stop();\n    assert.equal(shouldBeUndefined, undefined);\n  });\n\n  it('should report errors if the audio context throws', async function() {\n    await assert.rejects(() => new Promise((_, reject) => {\n      const test = testInputDevice({\n        audioContextFactory: mockAudioContextFactory({\n          analyserNodeOptions: { volumeValues: 100 },\n          doThrow: { createAnalyser: true },\n        }) as any,\n        duration: defaultDuration,\n        enumerateDevices: mockEnumerateDevicesFactory({\n          devices: [{ deviceId: 'default', kind: 'audioinput' } as any],\n        }),\n        getUserMedia,\n        pollIntervalMs: defaultPollIntervalMs,\n      });\n      test.on(InputTest.Events.Error, e => reject(e));\n    }));\n  });\n});\n"]}