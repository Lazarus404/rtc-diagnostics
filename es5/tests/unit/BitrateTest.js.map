{"version":3,"file":"BitrateTest.js","sourceRoot":"","sources":["../../../tests/unit/BitrateTest.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from 'assert';\nimport { EventEmitter } from 'events';\nimport * as sinon from 'sinon';\nimport { SinonFakeTimers } from 'sinon';\nimport { BitrateTest, testBitrate } from '../../lib/BitrateTest';\nimport { DiagnosticError } from '../../lib/errors/DiagnosticError';\n\ndescribe('BitrateTest', () => {\n  const root = (global as any);\n  const iceServers = [{\n    credential: 'bar',\n    url: 'turn:global.turn.twilio.com:3478?transport=udp',\n    urls: 'turn:global.turn.twilio.com:3478?transport=udp',\n    username: 'foo',\n  }];\n\n  let bitrateTest: BitrateTest;\n  let originalRTCPeerConnection: any;\n  let pcReceiverContext: any;\n  let pcSenderContext: any;\n  let rtcDataChannel: any;\n\n  let pcCreationCount = 0;\n\n  const expectEvent = (eventName: string, emitter: EventEmitter) => {\n    return new Promise((resolve) => emitter.once(eventName, (res) => resolve(res)));\n  };\n\n  const getPeerConnectionFactory = (): any => {\n    return function(this: any, rtcConfiguration: RTCConfiguration) {\n      this.rtcConfiguration = rtcConfiguration;\n      this.close = sinon.stub();\n      this.setLocalDescription = sinon.stub();\n      this.setRemoteDescription = sinon.stub();\n      this.createAnswer = sinon.stub().returns(Promise.resolve());\n      this.createOffer = sinon.stub().returns(Promise.resolve());\n      this.addIceCandidate = sinon.stub().returns({catch: sinon.stub()});\n      this.createDataChannel = sinon.stub().returns(rtcDataChannel);\n\n      // The tests always uses 2 PeerConnections\n      // The first one is always the receiver\n      // Let's capture them for mocking\n      pcCreationCount++;\n      if (pcCreationCount % 2 === 1) {\n        pcReceiverContext = this;\n      } else {\n        pcSenderContext = this;\n      }\n    };\n  };\n\n  beforeEach(() => {\n    rtcDataChannel = {\n      send: sinon.stub(),\n    };\n\n    originalRTCPeerConnection = root.RTCPeerConnection;\n    root.RTCPeerConnection = getPeerConnectionFactory();\n\n    bitrateTest = new BitrateTest({ iceServers });\n  });\n\n  afterEach(() => {\n    pcReceiverContext = null;\n    pcSenderContext = null;\n    root.RTCPeerConnection = originalRTCPeerConnection;\n  });\n\n  describe('testBitrate', () => {\n    it('should return BitrateTest instance', () => {\n      bitrateTest = testBitrate({ iceServers });\n      assert(!!bitrateTest);\n    });\n  });\n\n  describe('constructor', () => {\n    it('should use iceServers option', () => {\n      bitrateTest = new BitrateTest({ iceServers });\n      assert.deepEqual(pcReceiverContext.rtcConfiguration.iceServers, iceServers);\n      assert.deepEqual(pcSenderContext.rtcConfiguration.iceServers, iceServers);\n    });\n  });\n\n  describe('onicecandidate', () => {\n    const candidateRelay = 'candidate:1 1 udp 22 1.2.3.4 44 typ relay raddr 1.2.3.4 rport 55 generation 0 ufrag UqY3 network-id 2';\n    const candidateHost = 'candidate:1 1 tcp 22 1.2.3.4 9 typ host tcptype active generation 0 ufrag ARCY network-id 3';\n\n    let event: any;\n\n    beforeEach(() => {\n      event = {\n        candidate: {\n          candidate: candidateRelay,\n        },\n      };\n    });\n\n    context('receiver pc', () => {\n      it('should add ICE candidate to remote pc', () => {\n        pcReceiverContext.onicecandidate(event);\n        sinon.assert.calledWithExactly(pcSenderContext.addIceCandidate, event.candidate);\n      });\n\n      it('should not add ICE candidate if candidate event is empty', () => {\n        pcReceiverContext.onicecandidate({});\n        sinon.assert.notCalled(pcSenderContext.addIceCandidate);\n      });\n\n      it('should not add ICE candidate if candidate is not relay', () => {\n        event.candidate.candidate = candidateHost;\n        pcReceiverContext.onicecandidate(event);\n        sinon.assert.notCalled(pcSenderContext.addIceCandidate);\n      });\n\n      it('should emit error on addIceCandidate failure', () => {\n        pcSenderContext.addIceCandidate = () => ({\n          catch: (cb: Function) => {\n            cb('foo');\n          },\n        });\n\n        setTimeout(() => pcReceiverContext.onicecandidate(event));\n\n        return expectEvent('error', bitrateTest).then((result: any) => {\n          assert.equal(result.domError, 'foo');\n        });\n      });\n    });\n\n    context('sender pc', () => {\n      it('should add ICE candidate to remote pc', () => {\n        pcSenderContext.onicecandidate(event);\n        sinon.assert.calledWithExactly(pcReceiverContext.addIceCandidate, event.candidate);\n      });\n\n      it('should not add ICE candidate if candidate event is empty', () => {\n        pcSenderContext.onicecandidate({});\n        sinon.assert.notCalled(pcReceiverContext.addIceCandidate);\n      });\n\n      it('should not add ICE candidate if candidate is not relay', () => {\n        event.candidate.candidate = candidateHost;\n        pcSenderContext.onicecandidate(event);\n        sinon.assert.notCalled(pcReceiverContext.addIceCandidate);\n      });\n\n      it('should emit error on addIceCandidate failure', () => {\n        pcReceiverContext.addIceCandidate = () => ({\n          catch: (cb: Function) => {\n            cb('foo');\n          },\n        });\n\n        setTimeout(() => pcSenderContext.onicecandidate(event));\n\n        return expectEvent('error', bitrateTest).then((result: any) => {\n          assert.equal(result.domError, 'foo');\n        });\n      });\n    });\n  });\n\n  describe('setup RTCPeerConnections', () => {\n    const wait = () => new Promise(r => setTimeout(r, 1));\n\n    beforeEach(() => {\n      bitrateTest = new BitrateTest({ iceServers });\n      bitrateTest.stop = sinon.stub();\n    });\n\n    it('should throw error on createOffer failure', () => {\n      const callback = sinon.spy();\n      bitrateTest.on(BitrateTest.Events.Error, callback);\n      pcSenderContext.createOffer = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to create offer'));\n        sinon.assert.called(bitrateTest.stop as any);\n      });\n    });\n\n    it('should throw error on sender setLocalDescription failure', () => {\n      const callback = sinon.spy();\n      bitrateTest.on(BitrateTest.Events.Error, callback);\n      pcSenderContext.setLocalDescription = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to set local or remote description from createOffer'));\n        sinon.assert.called(bitrateTest.stop as any);\n      });\n    });\n\n    it('should throw error on receiver setRemoteDescription failure', () => {\n      const callback = sinon.spy();\n      bitrateTest.on(BitrateTest.Events.Error, callback);\n      pcReceiverContext.setRemoteDescription = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to set local or remote description from createOffer'));\n        sinon.assert.called(bitrateTest.stop as any);\n      });\n    });\n\n    it('should throw error on createAnswer failure', () => {\n      const callback = sinon.spy();\n      bitrateTest.on(BitrateTest.Events.Error, callback);\n      pcReceiverContext.createAnswer = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to create answer'));\n        sinon.assert.called(bitrateTest.stop as any);\n      });\n    });\n\n    it('should throw error on receiver setLocalDescription failure', () => {\n      const callback = sinon.spy();\n      bitrateTest.on(BitrateTest.Events.Error, callback);\n      pcReceiverContext.setLocalDescription = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to set local or remote description from createAnswer'));\n        sinon.assert.called(bitrateTest.stop as any);\n      });\n    });\n\n    it('should throw error on sender setRemoteDescription failure', () => {\n      const callback = sinon.spy();\n      bitrateTest.on(BitrateTest.Events.Error, callback);\n      pcSenderContext.setRemoteDescription = () => Promise.reject('foo');\n\n      return wait().then(() => {\n        sinon.assert.calledWith(callback, sinon.match.has('domError', 'foo'));\n        sinon.assert.calledWith(callback, sinon.match.has('message', 'Unable to set local or remote description from createAnswer'));\n        sinon.assert.called(bitrateTest.stop as any);\n      });\n    });\n  });\n\n  describe('setup data channel', () => {\n    let clock: SinonFakeTimers;\n\n    beforeEach(() => {\n      clock = sinon.useFakeTimers(0);\n      bitrateTest = new BitrateTest({ iceServers });\n      bitrateTest.stop = sinon.stub();\n    });\n\n    afterEach(() => {\n      clock.restore();\n    });\n\n    it('should emit error on createDataChannel failure', (done) => {\n      pcSenderContext.createDataChannel = () => { throw new Error(); };\n      bitrateTest.on(BitrateTest.Events.Error, (error: DiagnosticError) => {\n        assert.equal(error.message, 'Error creating data channel');\n        sinon.assert.notCalled(bitrateTest.stop as any);\n        done();\n      });\n      clock.tick(1);\n    });\n\n    describe('after creating successfully', () => {\n      describe('send message', () => {\n        beforeEach(() => {\n          clock.tick(1);\n          rtcDataChannel.readyState = 'open';\n        });\n\n        it('should not send data if rtcDataChannel is not open', () => {\n          rtcDataChannel.readyState = 'connecting';\n          rtcDataChannel.onopen();\n          clock.tick(1);\n\n          sinon.assert.notCalled(rtcDataChannel.send);\n        });\n\n        it('should not send data if max buffer is reached', () => {\n          rtcDataChannel.bufferedAmount = 999999;\n          rtcDataChannel.onopen();\n          clock.tick(1);\n\n          sinon.assert.notCalled(rtcDataChannel.send);\n        });\n\n        it('should send max data allowed', () => {\n          rtcDataChannel.onopen();\n          clock.tick(1);\n\n          sinon.assert.callCount(rtcDataChannel.send, 100);\n        });\n\n        it('should not send an empty packet', () => {\n          const data: string[] = [];\n          rtcDataChannel.send = (item: string) => data.push(item);\n          rtcDataChannel.onopen();\n          clock.tick(1);\n\n          assert(data.every((item: string) => item && item.length));\n        });\n      });\n\n      describe('on bitrate', () => {\n        const message = { data: Array(1024).fill('h').join('') };\n\n        let dataChannelEvent: any;\n        let sendMessage: Function;\n\n        beforeEach(() => {\n          clock = sinon.useFakeTimers(0);\n          bitrateTest = new BitrateTest({ iceServers });\n          clock.tick(1);\n          dataChannelEvent = {\n            channel: {\n              onmessage: null, // Overridden\n            },\n          };\n          rtcDataChannel.onopen();\n          pcReceiverContext.ondatachannel(dataChannelEvent);\n          sendMessage = dataChannelEvent.channel.onmessage;\n        });\n\n        afterEach(() => {\n          clock.restore();\n        });\n\n        it('should not emit bitrate if no sample data is available', () => {\n          const callback = sinon.stub();\n          bitrateTest.on(BitrateTest.Events.Bitrate, callback);\n\n          sendMessage(message);\n          clock.tick(1000);\n\n          sinon.assert.notCalled(callback);\n        });\n\n        it('should emit bitrate', () => {\n          const callback = sinon.stub();\n          bitrateTest.on(BitrateTest.Events.Bitrate, callback);\n\n          sendMessage(message);\n          clock.tick(1500);\n\n          sendMessage(message);\n          clock.tick(1200);\n\n          const expectedBitrate = 8 * ((message.data.length * 2) - message.data.length) / 1000;\n          sinon.assert.calledWithExactly(callback, expectedBitrate);\n        });\n\n        it('should stop emitting bitrate on stop', () => {\n          const callback = sinon.stub();\n          bitrateTest.on(BitrateTest.Events.Bitrate, callback);\n\n          sendMessage(message);\n          clock.tick(1200);\n\n          sendMessage(message);\n          clock.tick(1200);\n\n          bitrateTest.stop();\n          sendMessage(message);\n          clock.tick(1200);\n\n          sinon.assert.calledOnce(callback);\n        });\n\n        it('should emit end event on stop', () => {\n          const callback = sinon.stub();\n          bitrateTest.on(BitrateTest.Events.End, callback);\n          sendMessage(message);\n          clock.tick(1200);\n          sendMessage(message);\n          clock.tick(1200);\n          sendMessage(message);\n          clock.tick(1200);\n\n          bitrateTest.stop();\n          sinon.assert.calledOnce(callback);\n        });\n\n        it('should generate a report', (done) => {\n          const values: number[] = [];\n          bitrateTest.on(BitrateTest.Events.Bitrate, (bitrate: number) => values.push(bitrate));\n\n          bitrateTest.on(BitrateTest.Events.End, (report: BitrateTest.Report) => {\n            assert.deepStrictEqual(report, {\n              averageBitrate: values.reduce((total: number, value: number) => total += value, 0) / values.length,\n              didPass: true,\n              errors: [],\n              networkTiming: {\n                firstPacket: 1,\n              },\n              testName: 'bitrate-test',\n              testTiming: {\n                duration: 3601,\n                end: 3601,\n                start: 0,\n              },\n              values,\n            });\n            done();\n          });\n\n          sendMessage(message);\n          clock.tick(1200);\n          sendMessage(message);\n          clock.tick(1200);\n          sendMessage(message);\n          clock.tick(1200);\n\n          bitrateTest.stop();\n        });\n\n        it('should not pass test if no values are found', (done) => {\n          bitrateTest.on(BitrateTest.Events.End, (report: BitrateTest.Report) => {\n            assert.deepStrictEqual(report.didPass, false);\n            done();\n          });\n\n          clock.tick(4000);\n          bitrateTest.stop();\n        });\n\n        it('should include errors in a report', (done) => {\n          pcSenderContext.addIceCandidate = () => ({\n            catch: (cb: Function) => {\n              cb('foo');\n            },\n          });\n          const errors: DiagnosticError[] = [];\n          bitrateTest.on(BitrateTest.Events.Error, (error: DiagnosticError) => errors.push(error));\n\n          bitrateTest.on(BitrateTest.Events.End, (report: BitrateTest.Report) => {\n            assert.deepStrictEqual(report.errors, errors);\n            assert.deepStrictEqual(report.didPass, false);\n            done();\n          });\n\n          sendMessage(message);\n          clock.tick(1200);\n          sendMessage(message);\n\n          pcReceiverContext.onicecandidate({\n            candidate: {\n              candidate: 'relay',\n            },\n          });\n\n          clock.tick(1200);\n          sendMessage(message);\n          clock.tick(1200);\n\n          bitrateTest.stop();\n        });\n\n        describe('connection timing', () => {\n          it('should include PeerConnection timing', (done) => {\n            bitrateTest.on(BitrateTest.Events.End, (report: BitrateTest.Report) => {\n              const { start, end, duration } = report.networkTiming.peerConnection!;\n              assert.equal(start, 1001);\n              assert.equal(end, 2001);\n              assert.equal(duration, 1000);\n              done();\n            });\n\n            ['new', 'connecting', 'connected', 'disconnected', 'closed'].forEach(state => {\n              pcSenderContext.connectionState = state;\n              pcSenderContext.onconnectionstatechange();\n              clock.tick(1000);\n            });\n\n            sendMessage(message);\n            clock.tick(1200);\n            bitrateTest.stop();\n          });\n\n          it('should include IceConnection timing', (done) => {\n            bitrateTest.on(BitrateTest.Events.End, (report: BitrateTest.Report) => {\n              const { start, end, duration } = report.networkTiming.ice!;\n              assert.equal(start, 1001);\n              assert.equal(end, 2001);\n              assert.equal(duration, 1000);\n              done();\n            });\n\n            ['new', 'checking', 'connected', 'completed', 'disconnected', 'closed'].forEach(state => {\n              pcSenderContext.iceConnectionState = state;\n              pcSenderContext.oniceconnectionstatechange();\n              clock.tick(1000);\n            });\n\n            sendMessage(message);\n            clock.tick(1200);\n            bitrateTest.stop();\n          });\n        });\n      });\n    });\n  });\n});\n"]}