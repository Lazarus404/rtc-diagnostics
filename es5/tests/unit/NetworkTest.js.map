{"version":3,"file":"NetworkTest.js","sourceRoot":"","sources":["../../../tests/unit/NetworkTest.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable only-arrow-functions\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\n\nimport { DiagnosticError } from '../../lib/errors';\nimport {\n  NetworkTest,\n  testNetwork,\n} from '../../lib/NetworkTest';\nimport { mockRTCPeerConnectionFactory } from '../mocks/MockRTCPeerConnection';\n\nconst timeoutMs = 25;\n\ndescribe('testNetwork', function() {\n  let errorHandler: sinon.SinonSpy;\n  let endHandler: sinon.SinonSpy;\n\n  beforeEach(function() {\n    errorHandler = sinon.spy();\n    endHandler = sinon.spy();\n  });\n\n  it('should return a report', async function() {\n    const report: NetworkTest.Report =\n      await new Promise((resolve: (report: NetworkTest.Report) => void) => {\n        const test = testNetwork({\n          peerConnectionFactory: mockRTCPeerConnectionFactory({\n            candidate: 'test',\n            mockRTCDataChannelFactoryOptions: {\n              doClose: true,\n              doMessage: true,\n              doOpen: true,\n            },\n          }) as any,\n          timeoutMs,\n        } as any);\n        test.on(NetworkTest.Events.Error, errorHandler);\n        test.on(NetworkTest.Events.End, (r: NetworkTest.Report) => {\n          endHandler(r);\n          setTimeout(() => resolve(r), timeoutMs);\n        });\n      });\n    assert(report);\n    assert(report.didPass);\n    assert(report.networkTiming);\n  });\n\n  it('should still return a report without any ice candidates', async function() {\n    const report: NetworkTest.Report =\n      await new Promise((resolve: (report: NetworkTest.Report) => void) => {\n        const test = testNetwork({\n          peerConnectionFactory: mockRTCPeerConnectionFactory({\n            candidate: null,\n            mockRTCDataChannelFactoryOptions: {\n              doClose: true,\n              doMessage: true,\n              doOpen: true,\n            },\n          }) as any,\n          timeoutMs,\n        } as any);\n        test.on(NetworkTest.Events.Error, errorHandler);\n        test.on(NetworkTest.Events.End, (r: NetworkTest.Report) => {\n          endHandler(r);\n          setTimeout(() => resolve(r), timeoutMs);\n        });\n      });\n    assert(report.didPass);\n  });\n\n  it('should fail if a message is never received', async function() {\n    const report: NetworkTest.Report =\n      await new Promise((resolve: (report: NetworkTest.Report) => void) => {\n        const test = testNetwork({\n          peerConnectionFactory: mockRTCPeerConnectionFactory({\n            candidate: 'test',\n            mockRTCDataChannelFactoryOptions: {\n              doClose: true,\n              doMessage: false,\n              doOpen: true,\n            },\n          }) as any,\n          timeoutMs,\n        } as any);\n        test.on(NetworkTest.Events.Error, errorHandler);\n        test.on(NetworkTest.Events.End, (r: NetworkTest.Report) => {\n          endHandler(r);\n          setTimeout(() => resolve(r), timeoutMs);\n        });\n      });\n    assert(!report.didPass);\n    assert(report.errors.length);\n    assert(endHandler.calledOnce);\n    assert(endHandler.args[0][0].errors[0] instanceof DiagnosticError);\n  });\n\n  it('should forward an error from the RTCPeerConnections', async function() {\n    const report: NetworkTest.Report =\n      await new Promise((resolve: (report: NetworkTest.Report) => void) => {\n        const test = testNetwork({\n          peerConnectionFactory: mockRTCPeerConnectionFactory({\n            candidate: 'test',\n            doThrow: {\n              createOffer: true,\n            },\n            mockRTCDataChannelFactoryOptions: {\n              doClose: true,\n              doMessage: true,\n              doOpen: true,\n            },\n          }) as any,\n          timeoutMs,\n        } as any);\n        test.on(NetworkTest.Events.Error, errorHandler);\n        test.on(NetworkTest.Events.End, (r: NetworkTest.Report) => {\n          endHandler(r);\n          setTimeout(() => resolve(r), timeoutMs);\n        });\n      });\n    assert(!report.didPass);\n    assert(report.errors.length);\n    assert(endHandler.calledOnce);\n    assert(endHandler.args[0][0].errors[0] instanceof Error);\n  });\n});\n"]}