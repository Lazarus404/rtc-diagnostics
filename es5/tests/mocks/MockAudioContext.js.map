{"version":3,"file":"MockAudioContext.js","sourceRoot":"","sources":["../../../tests/mocks/MockAudioContext.ts"],"names":[],"mappings":";AAAA,0BAA0B;;AAE1B,2CAAmD;AACnD,uDAAsD;AACtD,qFAAoF;AACpF,mFAAkF;AAElF,IAAM,qCAAqC,GAA6B;IACtE,mBAAmB,EAAE,mCAAgB,CAAC,cAAc;CACrD,CAAC;AAEW,QAAA,uBAAuB,GAAG,UACrC,OAAyE;IAAzE,wBAAA,EAAA,+CAAyE;IACtE;QAAA;QAoBL,CAAC;QAnBC,uBAAK,GAAL,cAAS,CAAC;QACV,gCAAc,GAAd;YACE,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE;gBACrD,MAAM,IAAI,wBAAe,EAAE,CAAC;aAC7B;YACD,OAAO,IAAI,mCAAgB,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QAC3D,CAAC;QACD,0CAAwB,GAAxB;YACE,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,wBAAwB,EAAE;gBAC/D,MAAM,IAAI,wBAAe,EAAE,CAAC;aAC7B;YACD,OAAO,IAAI,iEAA+B,EAAE,CAAC;QAC/C,CAAC;QACD,yCAAuB,GAAvB;YACE,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,uBAAuB,EAAE;gBAC9D,MAAM,IAAI,wBAAe,EAAE,CAAC;aAC7B;YACD,OAAO,IAAI,+DAA8B,EAAE,CAAC;QAC9C,CAAC;QACH,cAAC;IAAD,CAAC,AApBI;AAAA,CAoBJ,CAAC","sourcesContent":["// tslint:disable no-empty\n\nimport { DiagnosticError } from '../../lib/errors';\nimport { MockAnalyserNode } from './MockAnalyserNode';\nimport { MockMediaElementAudioSourceNode } from './MockMediaElementAudioSourceNode';\nimport { MockMediaStreamAudioSourceNode } from './MockMediaStreamAudioSourceNode';\n\nconst defaultMockAudioContextFactoryOptions: MockAudioContext.Options = {\n  analyserNodeOptions: MockAnalyserNode.defaultOptions,\n};\n\nexport const mockAudioContextFactory = (\n  options: MockAudioContext.Options = defaultMockAudioContextFactoryOptions,\n) => class {\n  close() {}\n  createAnalyser() {\n    if (options.doThrow && options.doThrow.createAnalyser) {\n      throw new DiagnosticError();\n    }\n    return new MockAnalyserNode(options.analyserNodeOptions);\n  }\n  createMediaElementSource() {\n    if (options.doThrow && options.doThrow.createMediaElementSource) {\n      throw new DiagnosticError();\n    }\n    return new MockMediaElementAudioSourceNode();\n  }\n  createMediaStreamSource() {\n    if (options.doThrow && options.doThrow.createMediaStreamSource) {\n      throw new DiagnosticError();\n    }\n    return new MockMediaStreamAudioSourceNode();\n  }\n};\n\nexport declare namespace MockAudioContext {\n  export interface Options {\n    analyserNodeOptions: MockAnalyserNode.Options;\n    doThrow?: {\n      createAnalyser?: boolean;\n      createMediaElementSource?: boolean;\n      createMediaStreamSource?: boolean;\n    };\n  }\n}\n"]}