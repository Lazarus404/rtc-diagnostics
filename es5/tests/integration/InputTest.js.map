{"version":3,"file":"InputTest.js","sourceRoot":"","sources":["../../../tests/integration/InputTest.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable only-arrow-functions */\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\n\nimport {\n  InputTest,\n  testInputDevice,\n} from '../../lib/InputTest';\n\nconst defaultTestDuration = 500;\nconst defaultTestPollIntervalMs = 5;\n\ndescribe('testInputDevice', function() {\n  describe('with a deviceId', function() {\n    let volumeHandler: sinon.SinonSpy;\n    let errorHandler: sinon.SinonSpy;\n    let endHandler: sinon.SinonSpy;\n\n    beforeEach(async function() {\n      volumeHandler = sinon.spy();\n      errorHandler = sinon.spy();\n      endHandler = sinon.spy();\n\n      await new Promise(resolve => {\n        const test = testInputDevice({\n          debug: false,\n          duration: defaultTestDuration,\n          pollIntervalMs: defaultTestPollIntervalMs,\n        });\n        test.on(InputTest.Events.Error, errorHandler);\n        test.on(InputTest.Events.Volume, volumeHandler);\n        test.on(InputTest.Events.End, (_, r) => {\n          endHandler(r);\n          // we want to wait before resolving so we can detect if the end handler\n          // has been called multiple times\n          setTimeout(() => resolve(), defaultTestPollIntervalMs * 3);\n        });\n      });\n    });\n\n    it('should have called the volume handler more than once', function() {\n      assert(volumeHandler.callCount > 1);\n    });\n\n    it('should have not called the error handler', function() {\n      assert(!errorHandler.called);\n    });\n\n    it('should have called the end handler once', function() {\n      assert(endHandler.callCount === 1);\n    });\n\n    it('should have generated a valid report', function() {\n      const report: InputTest.Report = endHandler.args[0][0];\n      assert(report);\n\n      assert('deviceId' in report);\n      assert('errors' in report);\n      assert.equal(report.errors.length, 0);\n      assert('testTiming' in report);\n      assert('start' in report.testTiming!);\n      assert('end' in report.testTiming!);\n      assert('didPass' in report);\n      assert('testName' in report);\n      assert(report.testName === InputTest.testName);\n      assert('values' in report);\n    });\n\n    it('should contain the same amount of volume values as there were volume events', function() {\n      const report: InputTest.Report = endHandler.args[0][0];\n      assert(report);\n\n      assert.equal(report.values.length, volumeHandler.callCount);\n    });\n\n    it('should not contain any errors', function() {\n      const report: InputTest.Report = endHandler.args[0][0];\n      assert(report);\n\n      assert('errors' in report);\n      assert.equal(report.errors.length, 0);\n    });\n\n    afterEach(function() {\n      sinon.restore();\n    });\n  });\n\n  describe('without a deviceId', function() {\n    let volumeHandler: sinon.SinonSpy;\n    let errorHandler: sinon.SinonSpy;\n    let endHandler: sinon.SinonSpy;\n\n    beforeEach(async function() {\n      volumeHandler = sinon.spy();\n      errorHandler = sinon.spy();\n      endHandler = sinon.spy();\n\n      await new Promise(resolve => {\n        const test = testInputDevice({\n          debug: false,\n          duration: defaultTestDuration,\n          pollIntervalMs: defaultTestPollIntervalMs,\n        });\n        test.on(InputTest.Events.Error, errorHandler);\n        test.on(InputTest.Events.Volume, volumeHandler);\n        test.on(InputTest.Events.End, (_, r) => {\n          endHandler(r);\n          // we want to wait before resolving so we can detect if the end handler\n          // has been called multiple times\n          setTimeout(() => resolve(), defaultTestPollIntervalMs * 3);\n        });\n      });\n    });\n\n    it('should have called the volume handler more than once', function() {\n      assert(volumeHandler.callCount > 1);\n    });\n\n    it('should have not called the error handler', function() {\n      assert(!errorHandler.called);\n    });\n\n    it('should have called the end handler once', function() {\n      assert(endHandler.callCount === 1);\n    });\n\n    it('should have generated a valid report', function() {\n      const report: InputTest.Report = endHandler.args[0][0];\n      assert(report);\n\n      assert('deviceId' in report);\n      assert('errors' in report);\n      assert.equal(report.errors.length, 0);\n      assert('testTiming' in report);\n      assert('start' in report.testTiming!);\n      assert('end' in report.testTiming!);\n      assert('didPass' in report);\n      assert('testName' in report);\n      assert(report.testName === InputTest.testName);\n      assert('values' in report);\n    });\n\n    it('should contain the same amount of volume values as there were volume events', function() {\n      const report: InputTest.Report = endHandler.args[0][0];\n      assert(report);\n\n      assert.equal(report.values.length, volumeHandler.callCount);\n    });\n\n    it('should not contain any errors', function() {\n      const report: InputTest.Report = endHandler.args[0][0];\n      assert(report);\n\n      assert('errors' in report);\n      assert.equal(report.errors.length, 0);\n    });\n\n    afterEach(function() {\n      sinon.restore();\n    });\n  });\n});\n"]}