{"version":3,"file":"BitrateTest.js","sourceRoot":"","sources":["../../lib/BitrateTest.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,iCAAsC;AACtC,yCAAmF;AACnF,4DAA2D;AAyC3D;;;GAGG;AACH;IAAiC,+BAAY;IAuE3C;;;;OAIG;IACH,qBAAY,OAA4B;QAAxC,YACE,iBAAO,SAmBR;QArFD;;WAEG;QACK,aAAO,GAAsB,EAAE,CAAC;QAExC;;WAEG;QACK,uBAAiB,GAAW,CAAC,CAAC;QAEtC;;WAEG;QACK,2BAAqB,GAAW,CAAC,CAAC;QAE1C;;WAEG;QACK,oBAAc,GAAkB,EAAE,CAAC;QAY3C;;WAEG;QACK,uBAAiB,GAAqB,EAAE,CAAC;QAYjD;;WAEG;QACK,iBAAW,GAAoB,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAEpD;;WAEG;QACK,yBAAmB,GAAW,CAAC,CAAC;QAExC;;WAEG;QACK,aAAO,GAAa,EAAE,CAAC;QAU7B,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,KAAI,CAAC,iBAAiB,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QAEvD,KAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC;QACjE,KAAI,CAAC,SAAS,GAAG,IAAI,iBAAiB,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC;QAE/D,KAAI,CAAC,WAAW,CAAC,cAAc,GAAG,UAAC,KAAgC,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,KAAI,CAAC,SAAS,EAAE,KAAK,CAAC,EAA3C,CAA2C,CAAC;QACpH,KAAI,CAAC,SAAS,CAAC,cAAc,GAAG,UAAC,KAAgC,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,KAAI,CAAC,WAAW,EAAE,KAAK,CAAC,EAA7C,CAA6C,CAAC;QAEpH,KAAI,CAAC,sBAAsB,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;QAE5C,oDAAoD;QACpD,+BAA+B;QAC/B,UAAU,CAAC;YACT,KAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;;IACL,CAAC;IAED;;OAEG;IACH,0BAAI,GAAJ;QACE,aAAa,CAAC,IAAI,CAAC,mBAAoB,CAAC,CAAC;QACzC,aAAa,CAAC,IAAI,CAAC,uBAAwB,CAAC,CAAC;QAE7C,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACvB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QAEzB,IAAI,CAAC,WAAW,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAClC,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;QAE1E,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACK,mCAAa,GAArB;QACE,cAAc;QACd,IAAI,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC1D,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACxC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAClD,OAAO;SACR;QAED,4BAA4B;QAC5B,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,IAAM,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAE7G,IAAI,CAAC,qBAAqB,GAAG,GAAG,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAED;;OAEG;IACK,gCAAU,GAAlB;QACE,IAAM,cAAc,GAAG,IAAI,CAAC,OAAO;aAChC,MAAM,CAAC,UAAC,KAAa,EAAE,KAAa,IAAK,OAAA,KAAK,IAAI,KAAK,EAAd,CAAc,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QACrF,OAAO;YACL,cAAc,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc;YAC1D,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM;YACtD,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,aAAa,EAAE,IAAI,CAAC,cAAc;YAClC,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,UAAU,EAAE,IAAI,CAAC,WAAW;YAC5B,MAAM,EAAE,IAAI,CAAC,OAAO;SACrB,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACK,8BAAQ,GAAhB,UAAiB,OAAe,EAAE,KAAgB,EAAE,OAAiB;QACnE,IAAM,eAAe,GAAG,IAAI,iCAAe,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC5D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;QAErD,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;IACH,CAAC;IAED;;;OAGG;IACK,qCAAe,GAAvB,UAAwB,QAA2B,EAAE,KAAgC;QAArF,iBAQC;QAPC,IAAI,KAAK,CAAC,SAAS,EAAE;YACnB,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC;YAC5C,IAAI,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;gBACrC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC;qBACtC,KAAK,CAAC,UAAC,KAAe,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,yBAAyB,EAAE,KAAK,CAAC,EAA/C,CAA+C,CAAC,CAAC;aAChF;SACF;IACH,CAAC;IAED;;;OAGG;IACK,wCAAkB,GAA1B,UAA2B,KAAmB;QAC5C,IAAI,CAAC,mBAAmB,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;QAE9C,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;YACpC,IAAI,CAAC,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;SAC9C;IACH,CAAC;IAED;;;OAGG;IACK,8CAAwB,GAAhC,UAAiC,MAAiC;QAAlE,iBAMC;QALC,OAAO,OAAO,CAAC,GAAG,CAAC;YACjB,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,MAAM,CAAC;YAC5C,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC;SAC5C,CAAC,CAAC,KAAK,CAAC,UAAC,KAAe;YACvB,OAAA,KAAI,CAAC,QAAQ,CAAC,6DAA6D,EAAE,KAAK,EAAE,IAAI,CAAC;QAAzF,CAAyF,CAAC,CAAC;IAC/F,CAAC;IAED;;;OAGG;IACK,2CAAqB,GAA7B,UAA8B,KAAgC;QAA9D,iBAMC;QALC,OAAO,OAAO,CAAC,GAAG,CAAC;YACjB,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,KAAK,CAAC;YACzC,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,KAAK,CAAC;SAC7C,CAAC,CAAC,KAAK,CAAC,UAAC,KAAe;YACvB,OAAA,KAAI,CAAC,QAAQ,CAAC,4DAA4D,EAAE,KAAK,EAAE,IAAI,CAAC;QAAxF,CAAwF,CAAC,CAAC;IAC9F,CAAC;IAED;;OAEG;IACK,+BAAS,GAAjB;QACE,IAAI,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,KAAK,MAAM,EAAE;YACvE,OAAO;SACR;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,8BAAkB,EAAE,EAAE,CAAC,EAAE;YAC3C,IAAI,IAAI,CAAC,eAAe,CAAC,cAAc,IAAI,+BAAmB,EAAE;gBAC9D,MAAM;aACP;YACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,uBAAW,CAAC,CAAC;SACxC;IACH,CAAC;IAED;;OAEG;IACK,uCAAiB,GAAzB;QAAA,iBAgBC;QAfC,IAAI;YACF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;SACnE;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,QAAQ,CAAC,6BAA6B,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YACtD,OAAO;SACR;QAED,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG;YAC5B,KAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,EAAE,CAAC,CAAC,CAAC;YAClE,KAAI,CAAC,uBAAuB,GAAG,WAAW,CAAC,cAAM,OAAA,KAAI,CAAC,aAAa,EAAE,EAApB,CAAoB,EAAE,IAAI,CAAC,CAAC;QAC/E,CAAC,CAAC;QAEF,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,UAAC,gBAAqC;YACrE,gBAAgB,CAAC,OAAO,CAAC,SAAS,GAAG,UAAC,KAAmB,IAAK,OAAA,KAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAA9B,CAA8B,CAAC;QAC/F,CAAC,CAAC;IACJ,CAAC;IAED;;;OAGG;IACK,4CAAsB,GAA9B,UAA+B,EAAqB;QAApD,iBA4BC;QA3BC,uBAAuB;QACvB,EAAE,CAAC,uBAAuB,GAAG;YAC3B,KAAI,CAAC,cAAc,CAAC,cAAc,GAAG,KAAI,CAAC,cAAc,CAAC,cAAc,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;YAExF,IAAI,EAAE,CAAC,eAAe,KAAK,YAAY,EAAE;gBACvC,KAAI,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;aACvD;iBAAM,IAAI,EAAE,CAAC,eAAe,KAAK,WAAW,EAAE;gBAC7C,KAAI,CAAC,cAAc,CAAC,cAAc,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAE9C,IAAA,wCAAmD,EAAjD,gBAAK,EAAE,YAA0C,CAAC;gBAC1D,KAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,GAAG,GAAG,GAAG,KAAK,CAAC;aAC3D;QACH,CAAC,CAAC;QAEF,uBAAuB;QACvB,EAAE,CAAC,0BAA0B,GAAG;YAC9B,KAAI,CAAC,cAAc,CAAC,GAAG,GAAG,KAAI,CAAC,cAAc,CAAC,GAAG,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;YAElE,IAAI,EAAE,CAAC,kBAAkB,KAAK,UAAU,EAAE;gBACxC,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;aAC5C;iBAAM,IAAI,EAAE,CAAC,kBAAkB,KAAK,WAAW,EAAE;gBAChD,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAEnC,IAAA,6BAAwC,EAAtC,gBAAK,EAAE,YAA+B,CAAC;gBAC/C,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,GAAG,GAAG,GAAG,KAAK,CAAC;aAChD;QACH,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,gCAAU,GAAlB;QAAA,iBAcC;QAbC,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEpC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE;YACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;SAC9D;QAED,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;aACzB,IAAI,CAAC,UAAC,KAAgC,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,EAAjC,CAAiC,CAAC;aAC7E,IAAI,CAAC;YACJ,OAAO,KAAI,CAAC,WAAW,CAAC,YAAY,EAAE;iBACnC,IAAI,CAAC,UAAC,MAAiC,IAAK,OAAA,KAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,EAArC,CAAqC,CAAC;iBAClF,KAAK,CAAC,UAAC,KAAY,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,yBAAyB,EAAE,KAAK,EAAE,IAAI,CAAC,EAArD,CAAqD,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAY,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,wBAAwB,EAAE,KAAK,EAAE,IAAI,CAAC,EAApD,CAAoD,CAAC,CAAC;IACrF,CAAC;IAhTD;;OAEG;IACa,oBAAQ,GAAW,cAAc,CAAC;IA8SpD,kBAAC;CAAA,AAlTD,CAAiC,qBAAY,GAkT5C;AAlTY,kCAAW;AAoTxB,WAAiB,WAAW;IAC1B;;OAEG;IACH,IAAY,MAIX;IAJD,WAAY,MAAM;QAChB,6BAAmB,CAAA;QACnB,qBAAW,CAAA;QACX,yBAAe,CAAA;IACjB,CAAC,EAJW,MAAM,GAAN,kBAAM,KAAN,kBAAM,QAIjB;AAqDH,CAAC,EA7DgB,WAAW,GAAX,mBAAW,KAAX,mBAAW,QA6D3B;AAjXY,kCAAW;AAmXxB;;GAEG;AACH,SAAgB,WAAW,CAAC,OAA4B;IACtD,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC;AAFD,kCAEC","sourcesContent":["import { EventEmitter } from 'events';\nimport { BYTES_KEEP_BUFFERED, MAX_NUMBER_PACKETS, TEST_PACKET } from './constants';\nimport { DiagnosticError } from './errors/DiagnosticError';\nimport { NetworkTiming, TimeMeasurement } from './timing';\n\nexport declare interface BitrateTest {\n  /**\n   * Raised every second with a `bitrate` parameter in kbps which represents the connection's bitrate since the last time this event was raised.\n   * @param event [[BitrateTest.Events.Bitrate]].\n   * @param listener A callback with a `bitrate`(kbps) parameter since the last time this event was raised.\n   * @returns This [[BitrateTest]] instance.\n   * @event\n   */\n  on(\n    event: BitrateTest.Events.Bitrate,\n    listener: (bitrate: number) => any,\n  ): this;\n\n  /**\n   * Raised when the test encounters an error.\n   * @param event [[BitrateTest.Events.Error]].\n   * @param listener A callback with a [[DiagnosticError]] parameter.\n   * @returns This [[BitrateTest]] instance.\n   * @event\n   */\n  on(\n    event: BitrateTest.Events.Error,\n    listener: (error: DiagnosticError) => any,\n  ): this;\n\n  /**\n   * Raised upon completion of the test.\n   * @param event [[BitrateTest.Events.End]].\n   * @param listener A callback with a [[BitrateTest.Report]] parameter.\n   * @returns This [[BitrateTest]] instance.\n   * @event\n   */\n  on(\n    event: BitrateTest.Events.End,\n    listener: (report: BitrateTest.Report) => any,\n  ): this;\n}\n\n/**\n * Runs bitrate related tests while connected to a TURN server.\n * The events defined in the enum [[Events]] are emitted as the test runs.\n */\nexport class BitrateTest extends EventEmitter {\n  /**\n   * Name of this test\n   */\n  static readonly testName: string = 'bitrate-test';\n\n  /**\n   * Interval id for checking bitrate\n   */\n  private _checkBitrateIntervalId: NodeJS.Timer | undefined;\n\n  /**\n   * Errors detected during the test\n   */\n  private _errors: DiagnosticError[] = [];\n\n  /**\n   * Number of bytes received the last time it was checked\n   */\n  private _lastBytesChecked: number = 0;\n\n  /**\n   * Last timestamp when the bytes received was checked\n   */\n  private _lastCheckedTimestamp: number = 0;\n\n  /**\n   * Network related timing for this test\n   */\n  private _networkTiming: NetworkTiming = {};\n\n  /**\n   * The RTCPeerConnection that will receive data\n   */\n  private _pcReceiver: RTCPeerConnection;\n\n  /**\n   * The RTCPeerConnection that will send data\n   */\n  private _pcSender: RTCPeerConnection;\n\n  /**\n   * RTC configuration that will be used when initializing a RTCPeerConnection\n   */\n  private _rtcConfiguration: RTCConfiguration = {};\n\n  /**\n   * RTCDataChannel to use for sending data\n   */\n  private _rtcDataChannel: RTCDataChannel | undefined;\n\n  /**\n   * Interval id for sending data\n   */\n  private _sendDataIntervalId: NodeJS.Timer | undefined;\n\n  /**\n   * Timing measurements for this test\n   */\n  private _testTiming: TimeMeasurement = { start: 0 };\n\n  /**\n   * Total number of bytes received by the receiver RTCPeerConnection\n   */\n  private _totalBytesReceived: number = 0;\n\n  /**\n   * Bitrate (kbps) values collected during the test\n   */\n  private _values: number[] = [];\n\n  /**\n   * Construct a [[BitrateTest]] instance.\n   * @constructor\n   * @param options\n   */\n  constructor(options: BitrateTest.Options) {\n    super();\n\n    options = options || {};\n    this._rtcConfiguration.iceServers = options.iceServers;\n\n    this._pcReceiver = new RTCPeerConnection(this._rtcConfiguration);\n    this._pcSender = new RTCPeerConnection(this._rtcConfiguration);\n\n    this._pcReceiver.onicecandidate = (event: RTCPeerConnectionIceEvent) => this._onIceCandidate(this._pcSender, event);\n    this._pcSender.onicecandidate = (event: RTCPeerConnectionIceEvent) => this._onIceCandidate(this._pcReceiver, event);\n\n    this._setupNetworkListeners(this._pcSender);\n\n    // Return before starting the test to allow consumer\n    // to listen and capture errors\n    setTimeout(() => {\n      this._setupDataChannel();\n      this._startTest();\n    });\n  }\n\n  /**\n   * Stops the current test.\n   */\n  stop(): void {\n    clearInterval(this._sendDataIntervalId!);\n    clearInterval(this._checkBitrateIntervalId!);\n\n    this._pcSender.close();\n    this._pcReceiver.close();\n\n    this._testTiming.end = Date.now();\n    this._testTiming.duration = this._testTiming.end - this._testTiming.start;\n\n    this.emit(BitrateTest.Events.End, this._getReport());\n  }\n\n  /**\n   * Calculate bitrate by comparing bytes received between current time and the last time it was checked\n   */\n  private _checkBitrate(): void {\n    // No data yet\n    if (!this._lastCheckedTimestamp || !this._lastBytesChecked) {\n      this._lastCheckedTimestamp = Date.now();\n      this._lastBytesChecked = this._totalBytesReceived;\n      return;\n    }\n\n    // Calculate bitrate in kbps\n    const now = Date.now();\n    const bitrate = 8 * (this._totalBytesReceived - this._lastBytesChecked) / (now - this._lastCheckedTimestamp);\n\n    this._lastCheckedTimestamp = now;\n    this._lastBytesChecked = this._totalBytesReceived;\n    this._values.push(bitrate);\n    this.emit(BitrateTest.Events.Bitrate, bitrate);\n  }\n\n  /**\n   * Generate and returns the report for this test\n   */\n  private _getReport(): BitrateTest.Report {\n    const averageBitrate = this._values\n      .reduce((total: number, value: number) => total += value, 0) / this._values.length;\n    return {\n      averageBitrate: isNaN(averageBitrate) ? 0 : averageBitrate,\n      didPass: !this._errors.length && !!this._values.length,\n      errors: this._errors,\n      networkTiming: this._networkTiming,\n      testName: BitrateTest.testName,\n      testTiming: this._testTiming,\n      values: this._values,\n    };\n  }\n\n  /**\n   * Called when an error is detected\n   * @param message - Message that describes the error\n   * @param error - The error object\n   * @param isFatal - Whether this is a fatal error\n   */\n  private _onError(message: string, error?: DOMError, isFatal?: boolean): void {\n    const diagnosticError = new DiagnosticError(error, message);\n    this._errors.push(diagnosticError);\n    this.emit(BitrateTest.Events.Error, diagnosticError);\n\n    if (isFatal) {\n      this.stop();\n    }\n  }\n\n  /**\n   * Called when a local candidate is gathered\n   * @param remotePc - The remote RTCPeerConnection\n   */\n  private _onIceCandidate(remotePc: RTCPeerConnection, event: RTCPeerConnectionIceEvent): void {\n    if (event.candidate) {\n      const candidate = event.candidate.candidate;\n      if (candidate.indexOf('relay') !== -1) {\n        remotePc.addIceCandidate(event.candidate)\n          .catch((error: DOMError) => this._onError('Unable to add candidate', error));\n      }\n    }\n  }\n\n  /**\n   * Called when a message is received\n   * @param event\n   */\n  private _onMessageReceived(event: MessageEvent) {\n    this._totalBytesReceived += event.data.length;\n\n    if (!this._networkTiming.firstPacket) {\n      this._networkTiming.firstPacket = Date.now();\n    }\n  }\n\n  /**\n   * Called when an answer is created by the receiver\n   * @param answer - The answer session description created by the receiver RTCPeerConnection\n   */\n  private _onReceiverAnswerCreated(answer: RTCSessionDescriptionInit): Promise<void | [void, void]> {\n    return Promise.all([\n      this._pcReceiver.setLocalDescription(answer),\n      this._pcSender.setRemoteDescription(answer),\n    ]).catch((error: DOMError) =>\n      this._onError('Unable to set local or remote description from createAnswer', error, true));\n  }\n\n  /**\n   * Called when an offer has been created by the sender\n   * @param offer - The offer session description created by the sender RTCPeerConnection\n   */\n  private _onSenderOfferCreated(offer: RTCSessionDescriptionInit): Promise<void | [void, void]> {\n    return Promise.all([\n      this._pcSender.setLocalDescription(offer),\n      this._pcReceiver.setRemoteDescription(offer),\n    ]).catch((error: DOMError) =>\n      this._onError('Unable to set local or remote description from createOffer', error, true));\n  }\n\n  /**\n   * Send packets using data channel\n   */\n  private _sendData(): void {\n    if (!this._rtcDataChannel || this._rtcDataChannel.readyState !== 'open') {\n      return;\n    }\n    for (let i = 0; i < MAX_NUMBER_PACKETS; ++i) {\n      if (this._rtcDataChannel.bufferedAmount >= BYTES_KEEP_BUFFERED) {\n        break;\n      }\n      this._rtcDataChannel.send(TEST_PACKET);\n    }\n  }\n\n  /**\n   * Setup data channel for sending data\n   */\n  private _setupDataChannel(): void {\n    try {\n      this._rtcDataChannel = this._pcSender.createDataChannel('sender');\n    } catch (e) {\n      this._onError('Error creating data channel', e, true);\n      return;\n    }\n\n    this._rtcDataChannel.onopen = () => {\n      this._sendDataIntervalId = setInterval(() => this._sendData(), 1);\n      this._checkBitrateIntervalId = setInterval(() => this._checkBitrate(), 1000);\n    };\n\n    this._pcReceiver.ondatachannel = (dataChannelEvent: RTCDataChannelEvent) => {\n      dataChannelEvent.channel.onmessage = (event: MessageEvent) => this._onMessageReceived(event);\n    };\n  }\n\n  /**\n   * Setup network related event listeners on a PeerConnection\n   * @param pc\n   */\n  private _setupNetworkListeners(pc: RTCPeerConnection) {\n    // PeerConnection state\n    pc.onconnectionstatechange = () => {\n      this._networkTiming.peerConnection = this._networkTiming.peerConnection || { start: 0 };\n\n      if (pc.connectionState === 'connecting') {\n        this._networkTiming.peerConnection.start = Date.now();\n      } else if (pc.connectionState === 'connected') {\n        this._networkTiming.peerConnection.end = Date.now();\n\n        const { start, end } = this._networkTiming.peerConnection;\n        this._networkTiming.peerConnection.duration = end - start;\n      }\n    };\n\n    // ICE Connection state\n    pc.oniceconnectionstatechange = () => {\n      this._networkTiming.ice = this._networkTiming.ice || { start: 0 };\n\n      if (pc.iceConnectionState === 'checking') {\n        this._networkTiming.ice.start = Date.now();\n      } else if (pc.iceConnectionState === 'connected') {\n        this._networkTiming.ice.end = Date.now();\n\n        const { start, end } = this._networkTiming.ice;\n        this._networkTiming.ice.duration = end - start;\n      }\n    };\n  }\n\n  /**\n   * Starts the test.\n   */\n  private _startTest(): void {\n    this._testTiming.start = Date.now();\n\n    if (!this._rtcConfiguration.iceServers) {\n      return this._onError('No iceServers found', undefined, true);\n    }\n\n    this._pcSender.createOffer()\n      .then((offer: RTCSessionDescriptionInit) => this._onSenderOfferCreated(offer))\n      .then(() => {\n        return this._pcReceiver.createAnswer()\n          .then((answer: RTCSessionDescriptionInit) => this._onReceiverAnswerCreated(answer))\n          .catch((error: Error) => this._onError('Unable to create answer', error, true));\n      }).catch((error: Error) => this._onError('Unable to create offer', error, true));\n  }\n}\n\nexport namespace BitrateTest {\n  /**\n   * Possible events that a [[BitrateTest]] might emit. See [[BitrateTest.on]].\n   */\n  export enum Events {\n    Bitrate = 'bitrate',\n    End = 'end',\n    Error = 'error',\n  }\n\n  /**\n   * Options passed to [[BitrateTest]] constructor.\n   */\n  export interface Options {\n    /**\n     * The array of [RTCIceServer](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer) configurations to use.\n     * You need to provide TURN server configurations to ensure that your network bitrate is tested.\n     * You you can use [Twilio's Network Traversal Service](https://www.twilio.com/stun-turn) to get TURN credentials.\n     */\n    iceServers: RTCIceServer[];\n  }\n\n  /**\n   * Represents the report generated from a [[BitrateTest]].\n   */\n  export interface Report {\n    /**\n     * Average bitrate calculated during the test.\n     */\n    averageBitrate: number;\n\n    /**\n     * Whether or not the test passed. This is `false` if there are errors that occurred or if there are no bitrate values collected during the test.\n     */\n    didPass: boolean;\n\n    /**\n     * Any errors that occurred during the test.\n     */\n    errors: DiagnosticError[];\n\n    /**\n     * Network related time measurements.\n     */\n    networkTiming: NetworkTiming;\n\n    /**\n     * The name of the test.\n     */\n    testName: string;\n\n    /**\n     * Time measurements of test run time.\n     */\n    testTiming: TimeMeasurement;\n\n    /**\n     * Bitrate values collected during the test.\n     */\n    values: number[];\n  }\n}\n\n/**\n * Tests your bitrate while connected to a TURN server.\n */\nexport function testBitrate(options: BitrateTest.Options): BitrateTest {\n  return new BitrateTest(options);\n}\n"]}