{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/NetworkTest/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iCAAsC;AACtC,oCAImB;AACnB,sEAGyC;AAEzC,kCAA0C;AAC1C,8DAA0E;AAC1E,uCAAsC;AAkDtC;;;;GAIG;AACH;IAAiC,+BAAY;IAkD3C;;;OAGG;IACH,qBAAY,OAA4B;QAAxC,YACE,iBAAO,SAUR;QA7CD;;;WAGG;QACK,cAAQ,GAAkB,IAAI,CAAC;QACvC;;WAEG;QACK,aAAO,GAAsB,EAAE,CAAC;QACxC;;WAEG;QACK,oBAAc,GAAkB,EAAE,CAAC;QAa3C;;WAEG;QACK,eAAS,GAAoB,IAAI,CAAC;QASxC,KAAI,CAAC,QAAQ,yBAAQ,WAAW,CAAC,cAAc,GAAK,OAAO,CAAE,CAAC;QAE9D,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,KAAI,CAAC,qBAAqB,GAAG;YAC3B,UAAU,EAAE,KAAI,CAAC,QAAQ,CAAC,UAAU;SACrC,CAAC;QAEF,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,UAAU,EAAE,EAAjB,CAAiB,CAAC,CAAC;;IACtC,CAAC;IAED;;OAEG;IACK,oCAAc,GAAtB;QACE,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACK,8BAAQ,GAAhB,UAAiB,KAAsB;QACrC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED;;;;OAIG;IACW,gCAAU,GAAxB;;;;;;;;wBAEI,qBAAM,kCAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,+BAAY,EAAE,CAAC,EAAA;;wBAAjE,SAAiE,CAAC;wBAElE,IAAI,CAAC,SAAS,GAAG,IAAI,mBAAQ,CAAC;4BAC5B,oBAAoB,EAAE,IAAI,CAAC,qBAAqB;4BAChD,qBAAqB,EAAE,IAAI,CAAC,QAAQ,CAAC,qBAAqB;4BAC1D,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAU;yBAC1C,CAAC,CAAC;wBAIG,wBAAqC,IAAI,OAAO,CACpD,UAAC,OAAmB,EAAE,MAA0C;4BAC9D,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE;gCACnB,MAAM,CAAC,IAAI,0BAAiB,CAAC,qBAAqB,CAAC,CAAC,CAAC;gCACrD,OAAO;6BACR;4BACD,KAAI,CAAC,SAAS,CAAC,EAAE,CAAC,mBAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,UAAC,OAAqB;gCAC9D,IAAI,OAAO,CAAC,IAAI,KAAK,WAAW,CAAC,WAAW,EAAE;oCAC5C,KAAI,CAAC,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oCAC7C,OAAO,EAAE,CAAC;iCACX;4BACH,CAAC,CAAC,CAAC;wBACL,CAAC,CACF,CAAC;;;;wBAaA,qBAAM,sBAAc,CAAC,CAAC;;;;4CACpB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gDACnB,MAAM,IAAI,0BAAiB,CAAC,qBAAqB,CAAC,CAAC;6CACpD;4CACD,qBAAM,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE,EAAA;;4CAA1C,SAA0C,CAAC;4CAC3C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;4CAC7C,qBAAM,qBAAmB,EAAA;;4CAAzB,SAAyB,CAAC;;;;iCAC3B,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAU,CAAC,EAAA;;wBAP/B,SAO+B,CAAC;;;;wBAEhC,IAAI,OAAK,YAAY,6BAAoB,EAAE;4BACzC,MAAM,IAAI,wBAAe,CACvB,SAAS,EACT,8DAA8D;gCAC9D,UAAU,CACX,CAAC;yBACH;6BAAM;4BACL,+DAA+D;4BAC/D,0BAA0B;4BAC1B,MAAM,OAAK,CAAC;yBACb;;;wBAGH,oEAAoE;wBACpE,iBAAiB;wBACjB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;;;;wBAEjB,IAAI,OAAK,YAAY,wBAAe,EAAE;4BACpC,IAAI,CAAC,QAAQ,CAAC,OAAK,CAAC,CAAC;yBACtB;6BAAM,IACL,OAAO,YAAY,KAAK,WAAW,IAAI,OAAK,YAAY,YAAY,EACpE;4BACA,yDAAyD;4BACzD,kCAAkC;4BAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,wBAAe,CAC/B,OAAK,EACL,4BAA4B,CAC7B,CAAC,CAAC;yBACJ;6BAAM,IACL,OAAO,QAAQ,KAAK,WAAW,IAAI,OAAK,YAAY,QAAQ,EAC5D;4BACA,IAAI,CAAC,QAAQ,CAAC,IAAI,wBAAe,CAC/B,OAAK,EACL,wBAAwB,CACzB,CAAC,CAAC;yBACJ;6BAAM;4BACL,6BAA6B;4BAC7B,IAAI,CAAC,QAAQ,CAAC,OAAK,CAAC,CAAC;yBACtB;wBACD,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;;;;;;KAErB;IAED;;;;OAIG;IACK,2BAAK,GAAb,UAAc,OAAuB;QAAvB,wBAAA,EAAA,cAAuB;QACnC,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;SACxB;QAED,wEAAwE;QACxE,0DAA0D;QAC1D,IAAM,IAAI,GAAuB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,IAAI,EAAE,CAAC;QAExE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE3B,IAAM,qBAAqB,GAAkB,IAAI,CAAC,SAAS;YACzD,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;YACnC,CAAC,CAAC,EAAE,CAAC;QAEP,yEAAyE;QACzE,yCAAyC;QACzC,IAAM,MAAM,GAAuB;YACjC,OAAO,EAAE,OAAO,IAAI,IAAI,CAAC,cAAc,EAAE;YACzC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,aAAa,wBAAO,IAAI,CAAC,cAAc,GAAK,qBAAqB,CAAE;YACnE,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,UAAU,EAAE;gBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU;gBACzC,GAAG,EAAE,IAAI,CAAC,QAAQ;gBAClB,KAAK,EAAE,IAAI,CAAC,UAAU;aACvB;YACD,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IAC5C,CAAC;IA3ND;;;;OAIG;IACI,uBAAW,GAAW,cAAc,CAAC;IAC5C;;OAEG;IACI,oBAAQ,GAA2B,sBAAsB,CAAC;IACjE;;;OAGG;IACY,0BAAc,GAA+B;QAC1D,kBAAkB,iDAAA;QAClB,SAAS,EAAE,IAAI;KAChB,CAAC;IA2MJ,kBAAC;CAAA,AA7ND,CAAiC,qBAAY,GA6N5C;AA7NY,kCAAW;AA+NxB,WAAiB,WAAW;IAqC1B;;OAEG;IACH,IAAY,MAGX;IAHD,WAAY,MAAM;QAChB,qBAAW,CAAA;QACX,yBAAe,CAAA;IACjB,CAAC,EAHW,MAAM,GAAN,kBAAM,KAAN,kBAAM,QAGjB;AAwDH,CAAC,EAnGgB,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAmG3B;AAlUY,kCAAW;AAoUxB;;;GAGG;AACH,SAAgB,WAAW,CACzB,OAA4B;IAE5B,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC;AAJD,kCAIC","sourcesContent":["import { EventEmitter } from 'events';\nimport {\n  DiagnosticError,\n  InvalidStateError,\n  PromiseTimedOutError,\n} from '../errors';\nimport {\n  NetworkInformation,\n  networkInformationPolyfill as networkInformation,\n} from '../polyfills/NetworkInformation';\nimport { NetworkTiming, TimeMeasurement } from '../timing';\nimport { waitForPromise } from '../utils';\nimport { validateOptions, validateTime } from '../utils/optionValidation';\nimport { TestCall } from './TestCall';\n\nexport declare interface NetworkTest {\n  /**\n   * This event is emitted when the test ends. Emits a [[NetworkTest.Report]]\n   * summarizing the run time of the test.\n   * @param event [[NetworkTest.Events.End]]\n   * @param report The report summarizing the run time of the test.\n   * @private\n   */\n  emit(\n    event: NetworkTest.Events.End,\n    report: NetworkTest.Report,\n  ): boolean;\n  /**\n   * This event is emitted when the test encounters an error, fatal or not.\n   * Emits the [[DiagnosticError]] encountered.\n   * @param event [[NetworkTest.Events.Error]]\n   * @param error The [[DiagnosticError]] encountered, fatal or not.\n   * @private\n   */\n  emit(\n    event: NetworkTest.Events.Error,\n    error: DiagnosticError,\n  ): boolean;\n\n  /**\n   * Raised upon completion of the test.\n   * @param event [[NetworkTest.Events.End]]\n   * @param listener A callback with a [[NetworkTest.Report]] parameter.\n   * @returns This [[NetworkTest]] instance.\n   * @event\n   */\n  on(\n    event: NetworkTest.Events.End,\n    listener: (report: NetworkTest.Report,\n  ) => any): this;\n  /**\n   * Raised when the test encounters an error.\n   * @param event [[NetworkTest.Events.Error]]\n   * @param listener A callback with a [[DiagnosticError]] parameter.\n   * @returns This [[NetworkTest]] instance.\n   * @event\n   */\n  on(\n    event: NetworkTest.Events.Error,\n    listener: (error: DiagnosticError) => any,\n  ): this;\n}\n\n/**\n * Runs network connectivity tests while connected to Twilio.\n * This can be used to test connectivity to different regions using either UDP or TCP protocol.\n * Region and protocol can be specified using [[NetworkTest.Options.iceServers]] option.\n */\nexport class NetworkTest extends EventEmitter {\n  /**\n   * The test message that is sent from one end of the [[TestCall]] to the\n   * other to determine connectivity through WebRTC.\n   * @private\n   */\n  static testMessage: string = 'Ahoy, world!';\n  /**\n   * The name of the test.\n   */\n  static testName: 'network-connectivity' = 'network-connectivity';\n  /**\n   * Default options for the [[NetworkTest]]. These will be overwritten by any\n   * option passed in the [[NetworkTest.constructor]] `options` parameter.\n   */\n  private static defaultOptions: NetworkTest.DefaultOptions = {\n    networkInformation,\n    timeoutMs: 5000,\n  };\n\n  /**\n   * When the test ends, generated by a call to `Date.now` as soon as\n   * [[NetworkTest._stop]] is called internally.\n   */\n  private _endTime: number | null = null;\n  /**\n   * Any errors that the [[NetworkTest]] encounters during its run time.\n   */\n  private _errors: DiagnosticError[] = [];\n  /**\n   * Network event time measurements.\n   */\n  private _networkTiming: NetworkTiming = {};\n  /**\n   * Options that have been passed to the [[NetworkTest]].\n   */\n  private _options: NetworkTest.Options;\n  /**\n   * The configuration to pass to [[TestCall]].\n   */\n  private _peerConnectionConfig: RTCConfiguration;\n  /**\n   * When the test starts, set on construction.\n   */\n  private _startTime: number;\n  /**\n   * The [[TestCall]] used internally.\n   */\n  private _testCall: TestCall | null = null;\n\n  /**\n   * Initializes the test and starts it.\n   * @param options Options to pass to the constructor.\n   */\n  constructor(options: NetworkTest.Options) {\n    super();\n\n    this._options = { ...NetworkTest.defaultOptions, ...options };\n\n    this._startTime = Date.now();\n    this._peerConnectionConfig = {\n      iceServers: this._options.iceServers,\n    };\n\n    setTimeout(() => this._startTest());\n  }\n\n  /**\n   * Determine if the test has passed or not.\n   */\n  private _determinePass(): boolean {\n    return this._errors.length === 0;\n  }\n\n  /**\n   * Adds the error to the internal list of errors that have occured, which will\n   * be included in the final test report.\n   * @param error\n   */\n  private _onError(error: DiagnosticError): void {\n    this._errors.push(error);\n    this.emit(NetworkTest.Events.Error, error);\n  }\n\n  /**\n   * Starts the test by connecting the two [[RTCPeerConnection]] ends of the\n   * [[TestCall]] and then attempting to send a message from one end to the\n   * other. If this process takes\n   */\n  private async _startTest(): Promise<void> {\n    try {\n      await validateOptions(this._options, { timeoutMs: validateTime });\n\n      this._testCall = new TestCall({\n        peerConnectionConfig: this._peerConnectionConfig,\n        peerConnectionFactory: this._options.peerConnectionFactory,\n        timeoutDuration: this._options.timeoutMs!,\n      });\n\n      // Set up a promise that resolves when we receive the correct message\n      // on the receiving PeerConnection\n      const waitReceivedMessage: Promise<void> = new Promise(\n        (resolve: () => void, reject: (error: InvalidStateError) => void): void => {\n          if (!this._testCall) {\n            reject(new InvalidStateError('TestCall is `null`.'));\n            return;\n          }\n          this._testCall.on(TestCall.Event.Message, (message: MessageEvent) => {\n            if (message.data === NetworkTest.testMessage) {\n              this._networkTiming.firstPacket = Date.now();\n              resolve();\n            }\n          });\n        },\n      );\n\n      // We race between two promises:\n      // an async function that will resolve once we connect and we send and\n      // receive a message,\n      // and\n      // the timeout promise signifying the test has timed out.\n\n      // If an error occurs during the runtime of the async function, i.e.\n      // while we are establishing a connection, sending a message, or waiting\n      // for the message to be recieved, this rejection is forwarded to the\n      // [[_onError]] handler of the NetworkTest.\n      try {\n        await waitForPromise((async (): Promise<void> => {\n          if (!this._testCall) {\n            throw new InvalidStateError('TestCall is `null`.');\n          }\n          await this._testCall.establishConnection();\n          this._testCall.send(NetworkTest.testMessage);\n          await waitReceivedMessage;\n        })(), this._options.timeoutMs!);\n      } catch (error) {\n        if (error instanceof PromiseTimedOutError) {\n          throw new DiagnosticError(\n            undefined,\n            'NetworkTest timeout, the PeerConnection did not receive the ' +\n            'message.',\n          );\n        } else {\n          // Re-throw the error so the handler at the end of `_startTest`\n          // can handle it properly.\n          throw error;\n        }\n      }\n\n      // If none of the Promises reject, then we successfully received the\n      // `testMessage`.\n      this._stop(true);\n    } catch (error) {\n      if (error instanceof DiagnosticError) {\n        this._onError(error);\n      } else if (\n        typeof DOMException !== 'undefined' && error instanceof DOMException\n      ) {\n        // Could be thrown by the PeerConnections during the call\n        // `testCall.establishConnection`.\n        this._onError(new DiagnosticError(\n          error,\n          'A `DOMException` occurred.',\n        ));\n      } else if (\n        typeof DOMError !== 'undefined' && error instanceof DOMError\n      ) {\n        this._onError(new DiagnosticError(\n          error,\n          'A `DOMError` occurred.',\n        ));\n      } else {\n        // An unknown error occurred.\n        this._onError(error);\n      }\n      this._stop(false);\n    }\n  }\n\n  /**\n   * Stop the `NetworkTest`. This performs cleanup on the [[TestCall]] and\n   * emits a report for the test.\n   * @param didPass Override the check. Useful when encountering a fatal error.\n   */\n  private _stop(didPass: boolean = true): void {\n    if (this._testCall) {\n      this._testCall.close();\n    }\n\n    // Use the network information polyfill, if the info is `undefined` then\n    // use an empty object so all members will be `undefined`.\n    const info: NetworkInformation = this._options.networkInformation || {};\n\n    this._endTime = Date.now();\n\n    const testCallNetworkTiming: NetworkTiming = this._testCall\n      ? this._testCall.getNetworkTiming()\n      : {};\n\n    // We are unable to use the spread operator here on `networkInformation`,\n    // the values will always be `undefined`.\n    const report: NetworkTest.Report = {\n      didPass: didPass && this._determinePass(),\n      downlink: info.downlink,\n      downlinkMax: info.downlinkMax,\n      effectiveType: info.effectiveType,\n      errors: this._errors,\n      networkTiming: { ...this._networkTiming, ...testCallNetworkTiming },\n      rtt: info.rtt,\n      saveData: info.saveData,\n      testName: NetworkTest.testName,\n      testTiming: {\n        duration: this._endTime - this._startTime,\n        end: this._endTime,\n        start: this._startTime,\n      },\n      type: info.type,\n    };\n\n    this.emit(NetworkTest.Events.End, report);\n  }\n}\n\nexport namespace NetworkTest {\n  /**\n   * Default options for [[NetworkTest]]\n   * @private\n   */\n  export type DefaultOptions = Pick<Options, 'networkInformation' | 'timeoutMs'>;\n\n  /**\n   * Possible options for the [[NetworkTest]].\n   */\n  export interface Options {\n    /**\n     * The array of [RTCIceServer](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer) configurations to use.\n     * You need to provide TURN server configurations to ensure that your network connectivity is tested.\n     * See [Twilio's Network Traversal Service](https://www.twilio.com/stun-turn) to get TURN credentials and for specifying a region or protocol.\n     */\n    iceServers: RTCIceServer[];\n\n    /**\n     * A `NetworkInformation` connection. Used for mocking.\n     * @private\n     */\n    networkInformation?: NetworkInformation;\n\n    /**\n     * A `PeerConnection` factory to be used, mainly for Mocking.\n     * @private\n     */\n    peerConnectionFactory?: typeof RTCPeerConnection;\n\n    /**\n     * Timeout in milliseconds. This causes a [[DiagnosticError]] if the test is\n     * unable to connect to the server.\n     * @default 5000\n     */\n    timeoutMs?: number;\n  }\n  /**\n   * Possible events that an `NetworkTest` might emit. See [[NetworkTest.on]].\n   */\n  export enum Events {\n    End = 'end',\n    Error = 'error',\n  }\n  /**\n   * Represents the report generated from a [[NetworkTest]].\n   */\n  export interface Report {\n    /**\n     * Whether or not the test passed. This is `false` if there are errors that occurred during the test.\n     */\n    didPass: boolean;\n    /**\n     * The effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds.\n     * Please see [NetworkInformation.downlink API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink).\n     */\n    downlink?: number;\n    /**\n     * The maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.\n     * Please see [NetworkInformation.downlinkMax API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlinkMax).\n     */\n    downlinkMax?: number;\n    /**\n     * The effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'.\n     * Please see [NetworkInformation.effectiveType API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType).\n     */\n    effectiveType?: string;\n    /**\n     * Any errors that occurred during the test.\n     */\n    errors: DiagnosticError[];\n    /**\n     * Network related time measurements.\n     */\n    networkTiming: NetworkTiming;\n    /**\n     * The estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.\n     * Please see [NetworkInformation.rtt API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/rtt).\n     */\n    rtt?: number;\n    /**\n     * Returns `true` if the user has set a reduced data usage option on the user agent.\n     * Please see [NetworkInformation.saveData API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData).\n     */\n    saveData?: boolean;\n    /**\n     * The name of the test.\n     */\n    testName: typeof NetworkTest.testName;\n    /**\n     * Time measurements of test run time.\n     */\n    testTiming: TimeMeasurement;\n    /**\n     * The type of connection a device is using to communicate with the network.\n     * Please see [NetworkInformation.type API](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/type).\n     */\n    type?: string;\n  }\n}\n\n/**\n * Test network connectivity to Twilio\n * @param options\n */\nexport function testNetwork(\n  options: NetworkTest.Options,\n): NetworkTest {\n  return new NetworkTest(options);\n}\n"]}