{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../lib/utils/index.ts"],"names":[],"mappings":";;AAAA,oCAAiD;AAEjD;;;;;GAKG;AACH,SAAgB,aAAa,CAAC,OAAiB;IAC7C,yEAAyE;IACzE,yBAAyB;IAEzB,wEAAwE;IACxE,yEAAyE;IACzE,gDAAgD;IAChD,OAAO,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC;QACpC,CAAC,OAAO,CAAC,MAAM,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;AAC1E,CAAC;AATD,sCASC;AAED;;;;;GAKG;AACH,SAAgB,cAAc,CAC5B,OAAmB,EACnB,SAAiB;IAEjB,IAAI,KAAqB,CAAC;IAE1B,IAAM,cAAc,GAAkB,IAAI,OAAO,CAC/C,UAAC,CAAa,EAAE,MAA6C;QAC3D,KAAK,GAAG,UAAU,CAAC,cAAM,OAAA,MAAM,CAAC,IAAI,6BAAoB,EAAE,CAAC,EAAlC,CAAkC,EAAE,SAAS,CAAC,CAAC;IAC1E,CAAC,CACF,CAAC;IAEF,OAAO,OAAO,CAAC,IAAI,CAAC;QAClB,OAAO;QACP,cAAc;KACf,CAAC,CAAC,OAAO,CAAC;QACT,YAAY,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;AACL,CAAC;AAlBD,wCAkBC","sourcesContent":["import { PromiseTimedOutError } from '../errors';\n\n/**\n * @internalapi\n * Determine whether audio is silent or not by analyzing an array of volume values.\n * @param volumes An array of volume values to to analyze.\n * @returns Whether audio is silent or not.\n */\nexport function detectSilence(volumes: number[]): boolean {\n  // TODO Come up with a better algorithm for deciding if the volume values\n  // resulting in a success\n\n  // Loops over every sample, checks to see if it was completely silent by\n  // checking if the average of the amplitudes is 0, and returns whether or\n  // not more than 50% of the samples were silent.\n  return !(volumes && volumes.length > 3 &&\n    (volumes.filter((v: number) => v > 0).length / volumes.length) > 0.5);\n}\n\n/**\n * @internalapi\n * Reject a promise after a specified timeout\n * @param promiseOrArray The promise to timeout.\n * @param timeoutMs The amount of time after which to reject the promise.\n */\nexport function waitForPromise<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | void> {\n  let timer: NodeJS.Timeout;\n\n  const timeoutPromise: Promise<void> = new Promise(\n    (_: () => void, reject: (error: PromiseTimedOutError) => void) => {\n      timer = setTimeout(() => reject(new PromiseTimedOutError()), timeoutMs);\n    },\n  );\n\n  return Promise.race([\n    promise,\n    timeoutPromise,\n  ]).finally(() => {\n    clearTimeout(timer);\n  });\n}\n"]}