{"version":3,"file":"DiagnosticError.js","sourceRoot":"","sources":["../../../lib/errors/DiagnosticError.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;;;GAGG;AACH;IAAqC,mCAAK;IAUxC;;;;OAIG;IACH,yBAAY,QAAkC,EAAE,OAAgB;QAAhE,YACE,kBAAM,OAAO,CAAC,SAOf;QANC,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC5B,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,eAAe,CAAC,SAAS,CAAC,CAAC;QAEvD,KAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;;IAChC,CAAC;IACH,sBAAC;AAAD,CAAC,AAxBD,CAAqC,KAAK,GAwBzC;AAxBY,0CAAe","sourcesContent":["/**\n * @internalapi\n * Generic Diagnostic SDK error that provides a superclass for all other errors.\n */\nexport class DiagnosticError extends Error {\n  /**\n   * The associated `DOMError` that caused this `DiagnosticError`.\n   */\n  domError: DOMError | DOMException | undefined;\n  /**\n   * The timestamp of the occurrence of this error.\n   */\n  timestamp: number;\n\n  /**\n   * Immediately sets the timestamp and sets the name to `DiagnosticError`.\n   * @param domError\n   * @param message\n   */\n  constructor(domError?: DOMError | DOMException, message?: string) {\n    super(message);\n    this.timestamp = Date.now();\n    this.domError = domError;\n\n    Object.setPrototypeOf(this, DiagnosticError.prototype);\n\n    this.name = 'DiagnosticError';\n  }\n}\n"]}