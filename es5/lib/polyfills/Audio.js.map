{"version":3,"file":"Audio.js","sourceRoot":"","sources":["../../../lib/polyfills/Audio.ts"],"names":[],"mappings":";;AAAA,oCAA6C;AAY7C;;;GAGG;AACU,QAAA,qBAAqB,GAChC,IAAI,yBAAgB,CAClB,8DAA8D,CAC/D,CAAC;AAEJ;;;;GAIG;AACU,QAAA,aAAa,GACxB,OAAO,MAAM,KAAK,WAAW;IAC3B,CAAC,CAAC,MAAM,CAAC,KAAK;IACd,CAAC,CAAC,SAAS,CAAC","sourcesContent":["import { UnsupportedError } from '../errors';\n\n/**\n * @internalapi\n * We need to redeclare `Audio` on `Window` for old Typescript versions.\n */\ndeclare global {\n  interface Window {\n    Audio: typeof Audio;\n  }\n}\n\n/**\n * @internalapi\n * Common error that can be thrown when the polyfill is unable to work.\n */\nexport const AudioUnsupportedError: UnsupportedError =\n  new UnsupportedError(\n    'The `HTMLAudioElement` constructor `Audio` is not supported.',\n  );\n\n/**\n * @internalapi\n * This polyfill serves as a clean way to detect if the `HTMLAudioElement`\n * constructor `Audio` does not exist.\n */\nexport const AudioPolyfill: typeof Audio | undefined =\n  typeof window !== 'undefined'\n    ? window.Audio\n    : undefined;\n"]}